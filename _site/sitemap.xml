<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>王雅轩</title>
    <description>My Personal Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 13 Sep 2017 14:46:28 +0800</pubDate>
    <lastBuildDate>Wed, 13 Sep 2017 14:46:28 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Example content for posts</title>
        <description>&lt;p&gt;&lt;small&gt;This demo page has been used from &lt;a href=&quot;http://jasonm23.github.io/markdown-css-themes/&quot; target=&quot;_blank&quot;&gt;http://jasonm23.github.io/markdown-css-themes/&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;h1&gt;A First Level Header&lt;/h1&gt;

&lt;h2&gt;A Second Level Header&lt;/h2&gt;

&lt;h3&gt;A Third Level Header&lt;/h3&gt;

&lt;h4&gt;A Fourth Level Header&lt;/h4&gt;

&lt;h5&gt;A Fifth Level Header&lt;/h5&gt;

&lt;h6&gt;A Sixed Level Header&lt;/h6&gt;

&lt;p&gt;Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.&lt;/p&gt;

&lt;p&gt;The quick brown fox jumped over the lazy
dog&amp;rsquo;s back.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;Header 3&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt;

&lt;p&gt;Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.&lt;/p&gt;

&lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;

&lt;p&gt;This is the first level of quoting.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This is nested blockquote.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Back to the first level.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.
Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.
Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Candy.&lt;/li&gt;
&lt;li&gt;Gum.&lt;/li&gt;
&lt;li&gt;Booze.&lt;/li&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blue&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With multiple paragraphs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is a list item with two paragraphs. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit. Aliquam hendrerit
mi posuere lectus.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vestibulum enim wisi, viverra nec, fringilla in, laoreet
vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
sit amet velit.*   Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is a list item with two paragraphs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the second paragraph in the list item. You&amp;rsquo;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Another item in the same list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A list item with a bit of &lt;code&gt;code&lt;/code&gt; inline.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A list item with a blockquote:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This is a blockquote
inside a list item.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of a pre code block&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an &lt;a href=&quot;#&quot;&gt;example link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I start my morning with a cup of coffee and
&lt;a href=&quot;http://www.nytimes.com/&quot;&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;code-snippet&quot;&gt;Code snippet&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downloadWallpaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Downloading Image'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Image of the day downloaded.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Sat, 04 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/others/2016/06/04/example-content.html</link>
        <guid isPermaLink="true">http://localhost:4000/others/2016/06/04/example-content.html</guid>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>浏览器</title>
        <description>&lt;h3 id=&quot;浏览器都做了什么&quot;&gt;浏览器都做了什么&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;我们希望浏览器打开一个简单的网页&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Click the button&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/title&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;styles.css&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/head&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Well done.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;浏览器如何渲染网页&quot;&gt;浏览器如何渲染网页&lt;/h3&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.使用 HTML 创建文档对象模型（DOM）
2.使用 CSS 创建 CSS 对象模型（CSSOM）
3.基于 DOM 和 CSSOM 执行脚本（Scripts）
4.合并 DOM 和 CSSOM 形成渲染树（Render Tree）
5.使用渲染树布局（Layout）所有元素
6.渲染（Paint）所有元素
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/fe-liu-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤一--html&quot;&gt;步骤一 — HTML&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;浏览器从上到下读取标签，把他们分解成节点，从而创建 DOM 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fe-liu-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;html-加载优化策略&quot;&gt;HTML 加载优化策略&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;最小化和压缩&lt;br /&gt;
方法可用于所有内容，包括 HTML，CSS，JavaScript，图片和其它资源。&lt;br /&gt;
最小化是移除所有多余的字符，包括空格，注释，多余的分号，等等&lt;br /&gt;
压缩比如 GZip，大大压缩下载文件的大小&lt;br /&gt;
两种方法都用的情况下，资源加载量减少了 80% 到 90%。比如：bootstrap 节省了 87% 的流量。&lt;/li&gt;
  &lt;li&gt;无障碍&lt;br /&gt;
不会提升页面的下载速度，但会大大提升残障人士的满意度。给元素加上 aria 标签，图片提供 alt 文本，HTML 5 无障碍参见。&lt;br /&gt;
使用诸如 &lt;a href=&quot;http://wave.webaim.org/&quot;&gt;WAVE&lt;/a&gt; 的工具鉴别哪些地方可以提高可访问性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;步骤二--css&quot;&gt;步骤二 — CSS&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;当浏览器发现任何与节点相关的样式时，比如：外部，内部，或行内样式，立即停止渲染 DOM ，并利用这些节点创建 CSSOM。这就是 CSS &lt;strong&gt;“渲染阻塞“&lt;/strong&gt; 的由来。这里是不同类型样式的优缺点。&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;//外部样式&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;styles.css&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 内部样式&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 行内样式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;CSSOM 节点创建与 DOM 节点创建类似，随后，两者合并如下：
&lt;img src=&quot;/images/fe-liu-3.png&quot; alt=&quot;&quot; /&gt;
CSSOM 的构建会阻塞页面的渲染，因此我们想尽早加载样式，&lt;/p&gt;

&lt;h3 id=&quot;css-加载优化策略&quot;&gt;CSS 加载优化策略&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;使用 media 属性
media 属性指定加载样式的条件，比如：符合最大或最小分辨率？还是面向屏幕阅读器？&lt;/li&gt;
  &lt;li&gt;延迟加载 CSS
有些样式，比如：首屏以下的，或者不那么重要的，可以等待首屏最有价值的内容渲染完成再加载，可以使用脚本等待页面加载，然后再插入样式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这有两个栗子：&lt;a href=&quot;https://jakearchibald.com/2016/link-in-body/&quot;&gt;The future of loading CSS&lt;/a&gt;，&lt;a href=&quot;https://www.giftofspeed.com/defer-loading-css/&quot;&gt;Defer load CSS&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只加载需要的样式
使用 &lt;a href=&quot;https://github.com/giakki/uncss&quot;&gt;uncss&lt;/a&gt; 类似的工具，尽量移除不需要的样式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;步骤三--javascript&quot;&gt;步骤三 — JavaScript&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;浏览器不断构建 DOM / CSSOM 节点，直到发现外部或者行内的脚本。&lt;br /&gt;
由于脚本可能需要访问或操作之前的 HTML 或样式，我们必须等待它们构建完成。&lt;br /&gt;
因此浏览器必须停止解析节点，完成构建 CSSOM，执行脚本，然后再继续。这就是 JavaScript 被称作&lt;strong&gt;“解析器阻塞”&lt;/strong&gt;的原因。&lt;br /&gt;
脚本只能等到先前的 CSS 节点构建完成。
&lt;img src=&quot;/images/fe-liu-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;javascript-加载优化策略&quot;&gt;JavaScript 加载优化策略&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;异步加载脚本&lt;br /&gt;
脚本添加&lt;strong&gt;async&lt;/strong&gt;属性，可以通知浏览器不要阻塞其余页面的加载，下载脚本处于较低的优先级。一旦下载完成，就可以执行。
&lt;img src=&quot;/images/fe-liu-5.png&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;async&lt;/strong&gt;适用于不影响 DOM 或 CSSOM 的脚本，对一些跟我们的代码无关的，不影响用户体验的外部脚本尤其适用，比如：分析统计脚本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;延迟加载脚本&lt;br /&gt;
&lt;strong&gt;defer&lt;/strong&gt; 跟 &lt;strong&gt;async&lt;/strong&gt; 非常相似，不会阻塞页面加载，但会等到 HTML 完成解析后再执行。
&lt;img src=&quot;/images/fe-liu-6.png&quot; alt=&quot;&quot; /&gt;
使用 &lt;strong&gt;&lt;a href=&quot;https://varvy.com/pagespeed/defer-loading-javascript.html&quot;&gt;defer&lt;/a&gt;&lt;/strong&gt; 策略的 另一个好选择，或者也可以使用 addEventListener，了解更多，参加这里。
不幸的是 &lt;strong&gt;async&lt;/strong&gt; 和 &lt;strong&gt;defer&lt;/strong&gt; 对于行内的脚本不起作用，浏览器默认会编译执行它们。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;操作之前克隆节点
多次操作 DOM 时可以尝试，首先克隆整个 DOM 节点更加高效，操作克隆后的节点，然后替换先前的节点，避免了多次重绘，降低了 CPU 和内存消耗，同时也避免了不必要的页面闪烁。&lt;br /&gt;
需要注意，克隆的时候并没有克隆事件监听。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Preload/Prefetch/Prerender/Preconnect
这些新属性并不是所有的浏览器都支持。了解详情可以看这里：&lt;a href=&quot;https://css-tricks.com/prefetching-preloading-prebrowsing/&quot;&gt;Prefetching, preloading, prebrowsing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;步骤四--渲染树render-tree&quot;&gt;步骤四 — 渲染树（Render Tree）&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;一旦所有节点已被解析，DOM 和 CSSOM 准备合并，浏览器便会构建渲染树。如果我们把节点想象成单词，那么对象模型就是句子，渲染树便是整个页面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fe-liu-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤五--布局layout&quot;&gt;步骤五 — 布局（Layout）&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;布局阶段需要确定页面上所有元素的大小和位置。
&lt;img src=&quot;/images/fe-liu-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;步骤六--渲染paint&quot;&gt;步骤六 — 渲染（Paint）&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;最终的渲染阶段，会真正地光栅化屏幕上的像素，把页面呈现给用户。&lt;br /&gt;
&lt;img src=&quot;/images/fe-liu-9.png&quot; alt=&quot;&quot; /&gt;
整个过程耗时1秒或十分之一秒，我们的任务是让它更快。&lt;br /&gt;
如果 JavaScript 事件改变了页面的某部分，便会引起渲染树的重绘，并且迫使布局（Layout）和渲染（Paint）过程再次进行。&lt;/p&gt;

&lt;h3 id=&quot;浏览器如何发起网络请求&quot;&gt;浏览器如何发起网络请求&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;当浏览器请求一个 URL，服务端会响应一些 HTML。
我们需要认识一个新术语，关键渲染路径（Critical Rendering Path (CRP)），就是浏览器渲染页面的步骤数，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fe-liu-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;关键路径长度&quot;&gt;关键路径长度&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;关键渲染路径的度量标准是路径长度。最理想的关键路径长度是1。&lt;br /&gt;
如果页面包含一些内部样式和 JavaScript ，关键路径发生以下改变。&lt;br /&gt;
&lt;img src=&quot;/images/fe-liu-11.png&quot; alt=&quot;&quot; /&gt;
新增两步，构建 CSSOM和执行脚本，因为我们的 HTML 有内部样式和脚本需要计算。由于没有外部请求，我们的关键路径长度没变。&lt;br /&gt;
但是注意，我们的 HTML 大小增加到了 2kb，某些地方还是受了影响。&lt;/p&gt;

&lt;h3 id=&quot;关键字节数&quot;&gt;关键字节数&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;三个度量标准之二出现了，关键字节数，它用来衡量渲染页面需要传送多少字节数。&lt;br /&gt;
如果你认为不需要外部资源，就大错特错了，外部资源可以被缓存。&lt;br /&gt;
我们使用一个外部 CSS 文件，一个外部 JavaScript 文件，和一个外部带 async 属性的 JavaScript 文件。关键路径图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fe-liu-12.png&quot; alt=&quot;&quot; /&gt;
浏览器请求页面，构建 DOM，发现外部资源后开始下载，CSS 和 JavaScript 有较高的优先级，其它资源次之。&lt;br /&gt;
&lt;strong&gt;styles.css&lt;/strong&gt; 和 &lt;strong&gt;app.js&lt;/strong&gt; 通过另一个关键路径获取。暂时不获取 analytics.js ，因为加了 async 属性，浏览器将用另一个线程下载它，它处于较低优先级，不会阻塞页面渲染，也不影响关键路径。&lt;/p&gt;

&lt;h3 id=&quot;关键文件&quot;&gt;关键文件&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;最后一个度量标准是关键文件，浏览器渲染页面需要下载的文件总量。以上例子，&lt;strong&gt;*HTML 文件，CSS 和 JavaScript&lt;/strong&gt;文件算关键文件，&lt;strong&gt;async&lt;/strong&gt; 的脚本不算。当然是文件越少越好。&lt;/p&gt;

&lt;h3 id=&quot;综述&quot;&gt;综述&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;关键渲染路径是最重要的，它使得网站优化有规律可循。需要关注3个指标：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;关键字节数&lt;/li&gt;
  &lt;li&gt;关键文件数&lt;/li&gt;
  &lt;li&gt;关键路径长度&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 11 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/fe/2015/07/11/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/fe/2015/07/11/welcome-to-jekyll.html</guid>
        
        <category>http</category>
        
        
        <category>fe</category>
        
      </item>
    
      <item>
        <title>Test Page</title>
        <description>&lt;p&gt;This is a test blog page where we can explore how to embedd images in the blog.&lt;/p&gt;

&lt;h2 id=&quot;image-example-1&quot;&gt;Image example 1&lt;/h2&gt;

&lt;p&gt;Here, I will embedd image from local assets which goes into &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory in project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; directory. Choose a specific image, related to particular post. I chose to name the image &lt;code class=&quot;highlighter-rouge&quot;&gt;test-page-image-1.jpg&lt;/code&gt;, which I will embedd as:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my alternate text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/test-page-image-1.jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/test-page-image-1.jpg&quot; alt=&quot;my alternate text&quot; /&gt;;&lt;/p&gt;

&lt;p&gt;Ofcourse, you can load images from web as well. Just point to image direct URL. For ex, here is one placeholder image:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my alternate text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;http://lorempixel.com/400/200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://lorempixel.com/400/200&quot; alt=&quot;my alternate text&quot; /&gt;;&lt;/p&gt;

&lt;p&gt;One cool thing about this is the fact that images adapt themselves to the screen size of device. Try to resize your browser window and check for yourself, Have fun.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jun 2015 21:50:39 +0800</pubDate>
        <link>http://localhost:4000/others/2015/06/04/test-page.html</link>
        <guid isPermaLink="true">http://localhost:4000/others/2015/06/04/test-page.html</guid>
        
        
        <category>others</category>
        
      </item>
    
    
      <item>
        <title>Cool project 1</title>
        <description>Cool project 1</description>
        <link>http://localhost:4000#</link>
        <pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate>
        
        <category>Angular JS</category>
        
        <category>API</category>
        
      </item>
    
      <item>
        <title>Cool project 2</title>
        <description>Cool project 2</description>
        <link>http://localhost:4000#</link>
        <pubDate>Thu, 01 May 2014 00:00:00 +0800</pubDate>
        
        <category>Android</category>
        
        <category>PHP</category>
        
      </item>
    
      <item>
        <title>Cool project 3</title>
        <description>Cool project 3</description>
        <link>http://localhost:4000#</link>
        <pubDate>Sun, 01 Jun 2014 00:00:00 +0800</pubDate>
        
        <category>HTML</category>
        
        <category>JQuery</category>
        
        <category>PHP</category>
        
      </item>
    
      <item>
        <title>Cool project 4</title>
        <description>Cool project 4</description>
        <link>http://localhost:4000</link>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0800</pubDate>
        
        <category>Android</category>
        
        <category>nodejs</category>
        
      </item>
    
  </channel>
</rss>
